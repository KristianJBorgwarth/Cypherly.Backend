name: Deploy to Development Environment

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the solution
      - name: Build
        run: dotnet build --no-restore

      # Run tests
      - name: Test
        run: dotnet test --no-build --verbosity normal

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: "minimemail.api"
            context: "./MiniEmail.API"
            args: |
              --build-arg Email__Smtp__Host=${{ secrets.EMAIL_SMTP_HOST }} \
              --build-arg Email__Smtp__Port=${{ secrets.EMAIL_SMTP_PORT }} \
              --build-arg Email__Smtp__Username=${{ secrets.EMAIL_SMTP_USERNAME }} \
              --build-arg Email__Smtp__Password=${{ secrets.EMAIL_SMTP_PASSWORD }} \
              --build-arg Email__Smtp__FromAddress=${{ secrets.EMAIL_SMTP_FROMADDRESS }} \
              --build-arg RabbitMq__Host=${{ secrets.RABBITMQ_HOST }} \
              --build-arg RabbitMq__Username=${{ secrets.RABBITMQ_USERNAME }} \
              --build-arg RabbitMq__Password=${{ secrets.RABBITMQ_PASSWORD }} \
              --build-arg Serilog__WriteTo__1__Args__serverUrl=${{ secrets.SERILOG_SERVER_URL }}
          - name: "cypherly.authentication.api"
            context: "./Cypherly.Authentication.API"
            args: |
              --build-arg Jwt__Secret=${{ secrets.JWT_SECRET }} \
              --build-arg Jwt__Issuer=${{ secrets.JWT_ISSUER }} \
              --build-arg Jwt__Audience=${{ secrets.JWT_AUDIENCE }} \
              --build-arg Jwt__TokenLifeTimeInMinutes=${{ secrets.JWT_TOKENLIFETIMEINMINUTES }} \
              --build-arg ConnectionStrings__AuthenticationDbConnectionString=${{ secrets.AUTHENTICATION_DB_CONNECTIONSTRING }} \
              --build-arg Serilog__WriteTo__1__Args__serverUrl=${{ secrets.SERILOG_SERVER_URL }} \
              --build-arg RabbitMq__Host=${{ secrets.RABBITMQ_HOST }} \
              --build-arg RabbitMq__Username=${{ secrets.RABBITMQ_USERNAME }} \
              --build-arg RabbitMq__Password=${{ secrets.RABBITMQ_PASSWORD }} \
              --build-arg Valkey__Host=${{ secrets.VALKEY_HOST }} \
              --build-arg Valkey__Port=${{ secrets.VALKEY_PORT }}
          - name: "cypherly.usermanagement.api"
            context: "./Cypherly.UserManagement.API"
            args: |
              --build-arg ConnectionStrings__UserManagementDbConnectionString=${{ secrets.USERMANAGEMENT_DB_CONNECTIONSTRING }} \
              --build-arg Serilog__WriteTo__1__Args__serverUrl=${{ secrets.SERILOG_SERVER_URL }} \
              --build-arg RabbitMq__Host=${{ secrets.RABBITMQ_HOST }} \
              --build-arg RabbitMq__Username=${{ secrets.RABBITMQ_USERNAME }} \
              --build-arg RabbitMq__Password=${{ secrets.RABBITMQ_PASSWORD }} \
              --build-arg Jwt__Secret=${{ secrets.JWT_SECRET }} \
              --build-arg Jwt__Issuer=${{ secrets.JWT_ISSUER }} \
              --build-arg Jwt__Audience=${{ secrets.JWT_AUDIENCE }} \
              --build-arg Jwt__TokenLifeTimeInMinutes=${{ secrets.JWT_TOKENLIFETIMEINMINUTES }} \
              --build-arg Bucket__Host=${{ secrets.BUCKET_HOST }} \
              --build-arg Bucket__ProfilePictureBucket=${{ secrets.BUCKET_PROFILEPICTUREBUCKET }} \
              --build-arg Bucket__User=${{ secrets.BUCKET_USER }} \
              --build-arg Bucket__Password=${{ secrets.BUCKET_PASSWORD }}
          - name: "cypherly.sagaorchestrator.messaging"
            context: "./Cypherly.SagaOrchestrator.Messaging"
            args: |
              --build-arg ConnectionStrings__SagaOrchestratorDbConnectionString=${{ secrets.SAGAORCHESTRATOR_DB_CONNECTIONSTRING }} \
              --build-arg RabbitMq__Host=${{ secrets.RABBITMQ_HOST }} \
              --build-arg RabbitMq__Username=${{ secrets.RABBITMQ_USERNAME }} \
              --build-arg RabbitMq__Password=${{ secrets.RABBITMQ_PASSWORD }} \
              --build-arg Serilog__WriteTo__1__Args__serverUrl=${{ secrets.SERILOG_SERVER_URL }}

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker images
      - name: Build and Push Docker Image for ${{ matrix.service.name }}
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            ${{ matrix.service.args }} \
            -t ${{ secrets.DOCKER_USERNAME }}/dev:${{ matrix.service.name }}:latest \
            ${{ matrix.service.context }} \
            --push
